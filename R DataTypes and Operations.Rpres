R DataTypes and Operations
========================================================
author: Rohit Jain
date: 
autosize: true

R atomic class
========================================================

In R every thing is a object and for these object we have below atomic classes:
- Character
- Numeric
- Integer
- Complex
- Logical

R DataTypes
========================================================

Following are the data types in R:

- Vector
- List
- Matrices
- Data Frame
- Factors

Attributes of R objects

=======================================================

Following are the attributes of R objects:

- names and dimnames
- dimensions
- class
- length
- other user defined attributes

attribute() function can be used to get the attribute of any R object.

Important functions
========================================================

- getwd()
- setwd()
- objects()
- ls()
- rm()
- c()
- as.* functions (coercion)
- str()
- summary()
 etc....
 
 Operation 1: creating Vector
=======================================

```{r vector,echo=TRUE}
x <- c(0.5,0.6)     ## numeric
x <- c("a","b","c") ## character
x <- c(TRUE,FALSE)  ## logical
x <- 1:30           ## integer
x <- c(1+2i,34-24i) ## complex
```

Using vector function
```{r vectorFunction}
x <- vector("numeric", length = 10)
x
```

Operation2: Mixing objects
=========================================
```{r mixingObject}
x <- c(0.5,"a"); class(x)    ## character 
x <- c("a",FALSE); class(x)  ## character
x <- c(TRUE,2); class(x)    ## numeric
```

Operation3: Explicit coercion
===========================================
<small> Objects can be coerced explicitly using the as.* function from one class to another </small>
```{r explicitCoersion}
x <- 0:6; class(x)
as.numeric(x)
as.logical(x)
```
Lists
=====================

```{r list}
l <- list("a",c(1,2,3,4),TRUE)
l
```
Matrices1
========================

```{r matrix}
m <- matrix(nrow = 2,ncol = 3); m
dim(m)
```

Matrices2
==========================
<small>matrices are constructed column-wise</small>
```{r matrices}
attributes(m)
m <- matrix(data = 1:6, nrow = 2, ncol = 3); m
```

Matrices from vector
==============================
<small>Matrices can be constructed from a vector using the dim() function</small>
```{r matrixFromVector}
m <- 1:10; m
dim(m) <- c(2,5); m
```

cbind-ing and rbind-ing
===============================

```{r cbind_rbind}
x <- 1:3
y <- 10:12
cbind(x,y)
rbind(x,y)
```

Factors
=============================================
<small> Factors are used to refered to as categorical variables. Factors can be ordered or unordered. Factors in R are stored as a vector of integer values with a corresponding set of character values to use when the factor is displayed.</small>
```{r factor}
x <- factor(c("yes","no","yes","no","no","yes")); x
table(x)
```

Missing Values
=======================================
<small> Missing values in R are denoted by either NA or NAN 
- <b>is.na</b> is used to test objects are NA.
- <b>is.nan</b> is used to test for NANs.</small>
```{r missingvalues}
x <- c(1,2,3,NA); is.na(x)
```
<small>similarly we can check for Nans.</small>

Data Frames
=======================================
<small> 
- Data frame is a two dimensional data structure in R.
- It is a special case of a list which has each component of equal length.</small>
```{r dataframe}
x <- data.frame("SN" = 1:2, "Age" = c(21,15), "Name" = c("John","Dora")); str(x)
```

Names Attribute
============================================

```{r names}
x <- 1:3; names(x)
names(x) <- c("a","b","c"); x
names(x)
```

=============================================
lists can also be named
```{r listnames}
l <- list("a" = 1 , "b" = 2, "c" = 3); l
```

============================================
And matrices
```{r matirxnames}
m <- matrix(data = 1:4,nrow = 2,ncol = 2)
dimnames(m) <- list(c("m","n"),c("a","b")); m
```

Reading and Writing Data
=================================================
<small>
- read.table(), read.csv() reading tabular data
- readLines() reads a line from the terminal
- source() reads a R file
- write.table() to write data in tabular format.
- writeLines() Write text lines to a connection.
</small>

Connection to the outside world
====================================================
<small>
- <b>file</b>, opens a connection to a file.
- <b>gzfile</b>, opens a connection to a file compressed with gzip.
- <b>bzfile</b>, opens a connection to a file compressed with bzip2.
- <b>url</b>, opens a connection to a webpage
</small>

=========================================
```{r }
str(url)
con <- url("https://www.wikipedia.org/", "r")
x <-readLines(con)
head(x)
```
Subsetting
===============================================
<small>We can use either [, [[ or $ operator to access columns of data frame.</small>
```{r subsetting}
x <- data.frame("SN" = 1:2, "Age" = c(21,15), "Name" = c("John", "Dora"), stringsAsFactors = FALSE); x["Name"] ; x$Name ; x[["Name"]]
```

Removing Missing values
================================================
```{r removingMV}
x <- c(1,3,NA,5,NA); bad <- is.na(x); x[!bad]
y <- c("a","b",NA,"m","n"); good <- complete.cases(x,y); x[good] ; y[good]
```

======================================================
```{r}
airquality[4:6,]
good <- complete.cases(airquality)
airquality[good,][4:6,]
```

Vectorized operations
====================================================
```{r vectorOpera}
x <- 1:4; y<-6:9
x+y; x>2 ; y == 8 ; x*y ; x/y
```

Vectorized marix operations
==================================================
```{r vMatricOpera}
x <- matrix(1:4,2,2); y <- matrix(rep(10,4),2,2)
x*y; x%*%y
```